// Generated from grammar/CParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,30,191,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,5,7,101,8,7,10,7,12,7,104,9,7,1,
8,4,8,107,8,8,11,8,12,8,108,1,9,1,9,1,9,1,9,5,9,115,8,9,10,9,12,9,118,9,
9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,
16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,
1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,4,27,161,8,27,
11,27,12,27,162,1,27,1,27,1,28,1,28,1,28,1,28,5,28,171,8,28,10,28,12,28,
174,9,28,1,28,1,28,1,29,1,29,1,29,1,29,5,29,182,8,29,10,29,12,29,185,9,29,
1,29,1,29,1,29,1,29,1,29,1,183,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,1,0,6,3,0,65,90,95,
95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,10,10,13,13,34,34,3,
0,9,10,13,13,32,32,2,0,10,10,13,13,197,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,
3,64,1,0,0,0,5,69,1,0,0,0,7,75,1,0,0,0,9,82,1,0,0,0,11,86,1,0,0,0,13,91,
1,0,0,0,15,98,1,0,0,0,17,106,1,0,0,0,19,110,1,0,0,0,21,121,1,0,0,0,23,123,
1,0,0,0,25,125,1,0,0,0,27,127,1,0,0,0,29,129,1,0,0,0,31,131,1,0,0,0,33,133,
1,0,0,0,35,136,1,0,0,0,37,138,1,0,0,0,39,141,1,0,0,0,41,144,1,0,0,0,43,147,
1,0,0,0,45,149,1,0,0,0,47,151,1,0,0,0,49,153,1,0,0,0,51,155,1,0,0,0,53,157,
1,0,0,0,55,160,1,0,0,0,57,166,1,0,0,0,59,177,1,0,0,0,61,62,5,105,0,0,62,
63,5,102,0,0,63,2,1,0,0,0,64,65,5,101,0,0,65,66,5,108,0,0,66,67,5,115,0,
0,67,68,5,101,0,0,68,4,1,0,0,0,69,70,5,119,0,0,70,71,5,104,0,0,71,72,5,105,
0,0,72,73,5,108,0,0,73,74,5,101,0,0,74,6,1,0,0,0,75,76,5,114,0,0,76,77,5,
101,0,0,77,78,5,116,0,0,78,79,5,117,0,0,79,80,5,114,0,0,80,81,5,110,0,0,
81,8,1,0,0,0,82,83,5,105,0,0,83,84,5,110,0,0,84,85,5,116,0,0,85,10,1,0,0,
0,86,87,5,118,0,0,87,88,5,111,0,0,88,89,5,105,0,0,89,90,5,100,0,0,90,12,
1,0,0,0,91,92,5,112,0,0,92,93,5,114,0,0,93,94,5,105,0,0,94,95,5,110,0,0,
95,96,5,116,0,0,96,97,5,102,0,0,97,14,1,0,0,0,98,102,7,0,0,0,99,101,7,1,
0,0,100,99,1,0,0,0,101,104,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,16,
1,0,0,0,104,102,1,0,0,0,105,107,7,2,0,0,106,105,1,0,0,0,107,108,1,0,0,0,
108,106,1,0,0,0,108,109,1,0,0,0,109,18,1,0,0,0,110,116,5,34,0,0,111,115,
8,3,0,0,112,113,5,92,0,0,113,115,5,34,0,0,114,111,1,0,0,0,114,112,1,0,0,
0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,119,1,0,0,0,118,116,
1,0,0,0,119,120,5,34,0,0,120,20,1,0,0,0,121,122,5,61,0,0,122,22,1,0,0,0,
123,124,5,43,0,0,124,24,1,0,0,0,125,126,5,45,0,0,126,26,1,0,0,0,127,128,
5,42,0,0,128,28,1,0,0,0,129,130,5,47,0,0,130,30,1,0,0,0,131,132,5,60,0,0,
132,32,1,0,0,0,133,134,5,60,0,0,134,135,5,61,0,0,135,34,1,0,0,0,136,137,
5,62,0,0,137,36,1,0,0,0,138,139,5,62,0,0,139,140,5,61,0,0,140,38,1,0,0,0,
141,142,5,61,0,0,142,143,5,61,0,0,143,40,1,0,0,0,144,145,5,33,0,0,145,146,
5,61,0,0,146,42,1,0,0,0,147,148,5,40,0,0,148,44,1,0,0,0,149,150,5,41,0,0,
150,46,1,0,0,0,151,152,5,123,0,0,152,48,1,0,0,0,153,154,5,125,0,0,154,50,
1,0,0,0,155,156,5,59,0,0,156,52,1,0,0,0,157,158,5,44,0,0,158,54,1,0,0,0,
159,161,7,4,0,0,160,159,1,0,0,0,161,162,1,0,0,0,162,160,1,0,0,0,162,163,
1,0,0,0,163,164,1,0,0,0,164,165,6,27,0,0,165,56,1,0,0,0,166,167,5,47,0,0,
167,168,5,47,0,0,168,172,1,0,0,0,169,171,8,5,0,0,170,169,1,0,0,0,171,174,
1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,175,1,0,0,0,174,172,1,0,0,0,
175,176,6,28,0,0,176,58,1,0,0,0,177,178,5,47,0,0,178,179,5,42,0,0,179,183,
1,0,0,0,180,182,9,0,0,0,181,180,1,0,0,0,182,185,1,0,0,0,183,184,1,0,0,0,
183,181,1,0,0,0,184,186,1,0,0,0,185,183,1,0,0,0,186,187,5,42,0,0,187,188,
5,47,0,0,188,189,1,0,0,0,189,190,6,29,0,0,190,60,1,0,0,0,8,0,102,108,114,
116,162,172,183,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CParserLexer extends antlr4.Lexer {

    static grammarFileName = "CParser.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'if'", "'else'", "'while'", "'return'", 
                         "'int'", "'void'", "'printf'", null, null, null, 
                         "'='", "'+'", "'-'", "'*'", "'/'", "'<'", "'<='", 
                         "'>'", "'>='", "'=='", "'!='", "'('", "')'", "'{'", 
                         "'}'", "';'", "','" ];
	static symbolicNames = [ null, "IF", "ELSE", "WHILE", "RETURN", "INT_TYPE", 
                          "VOID_TYPE", "PRINTF", "ID", "INT", "STRING", 
                          "ASSIGN", "PLUS", "MINUS", "MULT", "DIV", "LT", 
                          "LE", "GT", "GE", "EQ", "NE", "LPAREN", "RPAREN", 
                          "LBRACE", "RBRACE", "SEMICOLON", "COMMA", "WS", 
                          "COMMENT", "BLOCK_COMMENT" ];
	static ruleNames = [ "IF", "ELSE", "WHILE", "RETURN", "INT_TYPE", "VOID_TYPE", 
                      "PRINTF", "ID", "INT", "STRING", "ASSIGN", "PLUS", 
                      "MINUS", "MULT", "DIV", "LT", "LE", "GT", "GE", "EQ", 
                      "NE", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMICOLON", 
                      "COMMA", "WS", "COMMENT", "BLOCK_COMMENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CParserLexer.EOF = antlr4.Token.EOF;
CParserLexer.IF = 1;
CParserLexer.ELSE = 2;
CParserLexer.WHILE = 3;
CParserLexer.RETURN = 4;
CParserLexer.INT_TYPE = 5;
CParserLexer.VOID_TYPE = 6;
CParserLexer.PRINTF = 7;
CParserLexer.ID = 8;
CParserLexer.INT = 9;
CParserLexer.STRING = 10;
CParserLexer.ASSIGN = 11;
CParserLexer.PLUS = 12;
CParserLexer.MINUS = 13;
CParserLexer.MULT = 14;
CParserLexer.DIV = 15;
CParserLexer.LT = 16;
CParserLexer.LE = 17;
CParserLexer.GT = 18;
CParserLexer.GE = 19;
CParserLexer.EQ = 20;
CParserLexer.NE = 21;
CParserLexer.LPAREN = 22;
CParserLexer.RPAREN = 23;
CParserLexer.LBRACE = 24;
CParserLexer.RBRACE = 25;
CParserLexer.SEMICOLON = 26;
CParserLexer.COMMA = 27;
CParserLexer.WS = 28;
CParserLexer.COMMENT = 29;
CParserLexer.BLOCK_COMMENT = 30;



